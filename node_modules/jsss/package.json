{
  "name": "jsss",
  "description": "Amazon S3 Multipart upload wrapper",
  "version": "0.0.19",
  "author": {
    "name": "TotenDev LTDA",
    "email": "support@totendev.com",
    "url": "http://totendev.com"
  },
  "dependencies": {
    "aws-sign": "0.0.2",
    "node-xml2json": "1.0.0"
  },
  "engines": {
    "node": ">= 0.4"
  },
  "main": "src/JSss.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/TotenDev/JSss.git"
  },
  "maintainers": [
    {
      "name": "Gabriel Wady",
      "email": "gabriel@totendev.com"
    }
  ],
  "keywords": [
    "AWS",
    "Amazon",
    "S3",
    "Multipart",
    "upload"
  ],
  "readme": "# JSss\n\nNodejs Amazon S3 Multipart upload module\n\n[![Build Status](https://secure.travis-ci.org/TotenDev/JSss.png?branch=master)](http://travis-ci.org/TotenDev/JSss)\n\n## Requirements\n\n- [node](https://github.com/joyent/node)\n- [npm](https://github.com/isaacs/npm)\n- [node-aws-sign](https://github.com/egorFiNE/node-aws-sign) (signs AWS requests)\n- [node-xml2json](https://github.com/buglabs/node-xml2json) (decode AWS requests)\n\n## Installation\n\nDownload and install dependencies\n\n    $ npm install\n\n## Usage\n\n    var MultiPart = require(\"./src/JSss.js\")(\"ohByBucket\",\"MyAccessKey\",\"mySecret\",\"folde/theFileName.zip\");\n    //Register for end event\n\tMultiPart.on(\"jsss-end\",function () {\n\t\tconsole.log(\"end\");\t\n\t});\n\t//Register for error event\n\tMultiPart.on(\"jsss-error\",function (err) {\n\t\tconsole.log(err);\n\t});\n\t//Upload successeded or finished\n\tMultiPart.on(\"jsss-upload-notice\",function (partNumber,status) {\n\t\tif (status) {\n\t\t\tpartFinished++;\n\t\t\tif (partFinished == partCount) {\n\t\t\t\tMultiPart.finishUpload();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t//try again ??\n\t\t}\n\t});\n\t//Must be registered to MultiPart API start\n\tMultiPart.on(\"jsss-ready\",function () {\n\t\tconsole.log(\"ready\");\n\t\n\t\tpartFinished = 0;\n\t\tpartCount = 2;\n\t\t//All datas need to be 5MB>\n\t\tMultiPart.uploadChunk(\"the big data\",1);\n\t\tMultiPart.uploadChunk(\"the big data2\",2);\n\t});\n\nMore samples at `samples/` directory.\n\n## Methods\n\n#### Initialize Wrapper\n\nParameters:\n\n* bucketID - **Type:**string - **Description:**Name of Object in S3 bucket   - **REQUIRED**\n* AWSAccessKeyID - **Type:**string - **Description:**AWS AccessKeyID - **REQUIRED**\n* AWSSecretAccessKey - **Type:**string - **Description:**AWS SecretAccessKey - **REQUIRED**\n* fileName - **Type:**string - **Description:**fileName to be on S3 - **REQUIRED**\n* options - **Type:**OptionObject - **Description:**Options Object - **OPTIONAL**\n* options.endPoint - **Type:**string - **Description:**End point to be used, default `s3.amazonaws.com` - **OPTIONAL**\n* options.useSSL - **Type:**boolean - **Description:**Use SSL or not, default is true - **OPTIONAL**\n\nSample:\n\n    var MultiPart = require(\"./src/JSss.js\")(\"myBucket\",\"AWSAccessKey\",\"AWSSecretAccessKey\",\"fileNameToBeUp\",{ endPoint:\"secondary.s3.com\",useSSL:false });\n    \n---\n#### Upload Chunk\n\nNotice this function will not call error listener, it will call upload-notice listener with positionChuck parameter and if succeeded or not, so you can try to re-upload that part if you want.\n\nParameters:\n- chunkData - **Type:**string || Buffer - **Description:**Chunk to be uploaded - **REQUIRED**\n- chunkPosition - **Type:**number - **Description:**Chunk Position, so you can upload multiple parts at same time - **REQUIRED**\n- fileEncoding - **Type:**number - **Description:**Which encoding to use when uploading. Default is `utf8` - **OPTIONAL**\n\nSample:\n\n    MultiPart.uploadChunk(chunkData,chunkPosition,'binary');\n    \n---\n#### Finish Upload\nThis method will finish upload, and can take a bit long for large files, since amazon will only answer the request when all parts are together.\n\nSample:\n\n    MultiPart.finishUpload();\n\n---\n#### Finish Upload\nThis method will cancel upload, and delete all uploaded chunks.\n\nSample:\n\n    MultiPart.abortUpload();\n\n\n## Events\n\n####Ready \nThis event **MUST** be registered in order to wrapper start. When this event is reached you are able to start uploading chunks.\n\nEvent-String: `jsss-ready`\n\nSample:\n\n    //Must be registered to MultiPart API start\n\tMultiPart.on(\"jsss-ready\",function () {\n\t\tconsole.log(\"I'm ready :)\");\n\t}\n---\n####Upload Notice\nThis event will be reached when an upload succeeded or failed.\n\nEvent-String: `jsss-upload-notice`\n\nSample:\n\n    MultiPart.on(\"jsss-upload-notice\",function (partNumber,status) {\n\t    if (status) {\n\t       console.log(\"success :) on part:\" + partNumber);\n\t    }else {\n\t\t   console.log(\"error on part:\" + partNumber + \"let's try again?\");\n\t    }\n\t});\n---\n####Error\nThis event will be reached when an error occur in any fundamental part of upload (`start`,`finish`,`abort`).\nDo **NOT** call `terminate` or `abort` method from error event, since those methods can emit an error event.\n\nEvent-String: `jsss-error`\n\nSample:\n\n\tMultiPart.on(\"jsss-error\",function (err) {\n\t\tconsole.log(\"Bad\",err);\n\t}\n---\n####End\nThis event will be reached when upload finished by `abortUpload()` or `finishUpload()` OR if it didn't start properly.\n\nEvent-String: `jsss-end`\n\nSample:\n\n\tMultiPart.on(\"jsss-end\",function () {\n\t\tconsole.log(\"Bye\");\n\t}\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Added some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## License\n\n[MIT](JSss/raw/master/LICENSE)",
  "_id": "jsss@0.0.19",
  "_from": "jsss"
}
